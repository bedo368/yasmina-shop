{"ast":null,"code":"import Axios from \"axios\";\nimport productsTypes from \"./productsTypes\";\n\nconst fitchProductStart = () => {\n  return {\n    type: productsTypes.FETCH_PRODUCTS_START\n  };\n};\n\nconst fitchProductSuccess = products => {\n  return {\n    type: productsTypes.FETCH_PRODUCTS_SUCCESS,\n    payload: products\n  };\n};\n\nconst fitchProductfail = error => {\n  return {\n    type: productsTypes.FETCH_PRODUCTS_FAIL,\n    payload: error\n  };\n};\n\nexport const fetchProductsAscync = () => {\n  return dispatch => {\n    dispatch(fitchProductStart());\n    const query = `\n     query{\n       getAllProducts {\n         _id\n         name\n         image\n         brand\n         price\n         rating\n         numReviews\n         category\n         description\n         countInStock\n         \n         \n       }\n     }\n     `;\n    Axios({\n      method: \"POST\",\n      data: {\n        query\n      },\n      url: \"/graphql\"\n    }).then(res => {\n      dispatch(fitchProductSuccess(res.data.data.getAllProducts));\n    }).catch(error => {\n      console.log(error.response);\n      const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n      dispatch(fitchProductfail(errorMessage));\n    });\n  };\n};\nexport const removeProductById = ({\n  id\n}) => async (dispatch, getState) => {\n  try {\n    dispatch();\n    const query = `\n     mutation($id:String!){\n      removeProductById(id:$id) {\n         _id\n         \n       }\n     }\n     `;\n    const token = getState().userReducer.userInfo.token;\n    const removedProductId = await Axios.post(\"/graphql\", {\n      query,\n      variables: {\n        id\n      }\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n  } catch (error) {}\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/products/productsAction.js"],"names":["Axios","productsTypes","fitchProductStart","type","FETCH_PRODUCTS_START","fitchProductSuccess","products","FETCH_PRODUCTS_SUCCESS","payload","fitchProductfail","error","FETCH_PRODUCTS_FAIL","fetchProductsAscync","dispatch","query","method","data","url","then","res","getAllProducts","catch","console","log","response","errorMessage","errors","message","removeProductById","id","getState","token","userReducer","userInfo","removedProductId","post","variables","headers","Authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEF,aAAa,CAACG;AADf,GAAP;AAGD,CAJD;;AAKA,MAAMC,mBAAmB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACLH,IAAAA,IAAI,EAAEF,aAAa,CAACM,sBADf;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALD;;AAMA,MAAMG,gBAAgB,GAAIC,KAAD,IAAW;AAClC,SAAO;AACLP,IAAAA,IAAI,EAAEF,aAAa,CAACU,mBADf;AAELH,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACX,iBAAiB,EAAlB,CAAR;AACA,UAAMY,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAjBI;AAkBAd,IAAAA,KAAK,CAAC;AACJe,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,IAAI,EAAE;AACJF,QAAAA;AADI,OAFF;AAKJG,MAAAA,GAAG,EAAE;AALD,KAAD,CAAL,CAOGC,IAPH,CAOSC,GAAD,IAAS;AACbN,MAAAA,QAAQ,CAACR,mBAAmB,CAACc,GAAG,CAACH,IAAJ,CAASA,IAAT,CAAcI,cAAf,CAApB,CAAR;AACD,KATH,EAUGC,KAVH,CAUUX,KAAD,IAAW;AAChBY,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACc,QAAlB;AACA,YAAMC,YAAY,GAAGf,KAAK,CAACc,QAAN,CAAeR,IAAf,CAAoBU,MAApB,GACjBhB,KAAK,CAACc,QAAN,CAAeR,IAAf,CAAoBU,MAApB,CAA2B,CAA3B,EAA8BC,OADb,GAEjBjB,KAAK,CAACc,QAAN,CAAeR,IAFnB;AAGAH,MAAAA,QAAQ,CAACJ,gBAAgB,CAACgB,YAAD,CAAjB,CAAR;AACD,KAhBH;AAiBD,GArCD;AAsCD,CAvCM;AAyCP,OAAO,MAAMG,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY,OAAOhB,QAAP,EAAiBiB,QAAjB,KAA8B;AACzE,MAAI;AACFjB,IAAAA,QAAQ;AACR,UAAMC,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,MAPI;AAQA,UAAMiB,KAAK,GAAGD,QAAQ,GAAGE,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AAEA,UAAMG,gBAAgB,GAAG,MAAMlC,KAAK,CAACmC,IAAN,CAC7B,UAD6B,EAE7B;AACErB,MAAAA,KADF;AAEEsB,MAAAA,SAAS,EAAE;AAAEP,QAAAA;AAAF;AAFb,KAF6B,EAM7B;AACEQ,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASP,KAAM;AAFxB;AADX,KAN6B,CAA/B;AAcD,GA1BD,CA0BE,OAAOrB,KAAP,EAAc,CAAE;AACnB,CA5BM","sourcesContent":["import Axios from \"axios\"\nimport productsTypes from \"./productsTypes\"\nconst fitchProductStart = () => {\n  return {\n    type: productsTypes.FETCH_PRODUCTS_START,\n  }\n}\nconst fitchProductSuccess = (products) => {\n  return {\n    type: productsTypes.FETCH_PRODUCTS_SUCCESS,\n    payload: products,\n  }\n}\nconst fitchProductfail = (error) => {\n  return {\n    type: productsTypes.FETCH_PRODUCTS_FAIL,\n    payload: error,\n  }\n}\n\nexport const fetchProductsAscync = () => {\n  return (dispatch) => {\n    dispatch(fitchProductStart())\n    const query = `\n     query{\n       getAllProducts {\n         _id\n         name\n         image\n         brand\n         price\n         rating\n         numReviews\n         category\n         description\n         countInStock\n         \n         \n       }\n     }\n     `\n    Axios({\n      method: \"POST\",\n      data: {\n        query,\n      },\n      url: \"/graphql\",\n    })\n      .then((res) => {\n        dispatch(fitchProductSuccess(res.data.data.getAllProducts))\n      })\n      .catch((error) => {\n        console.log(error.response)\n        const errorMessage = error.response.data.errors\n          ? error.response.data.errors[0].message\n          : error.response.data\n        dispatch(fitchProductfail(errorMessage))\n      })\n  }\n}\n\nexport const removeProductById = ({ id }) => async (dispatch, getState) => {\n  try {\n    dispatch()\n    const query = `\n     mutation($id:String!){\n      removeProductById(id:$id) {\n         _id\n         \n       }\n     }\n     `\n    const token = getState().userReducer.userInfo.token\n\n    const removedProductId = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables: { id },\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n      \n    )\n  } catch (error) {}\n}\n"]},"metadata":{},"sourceType":"module"}