{"ast":null,"code":"import Axios from \"axios\";\nimport orderTypes from \"./orderTypes\";\nexport const createOrder = cart => async (dispatch, getState) => {\n  const {\n    orderItems,\n    shippingAddress,\n    paymentMethode,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    itemsPrice\n  } = cart;\n\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START\n    });\n    const query = `\n      mutation createOrder(\n        $orderItems : String!,\n        $shippingAddress : String!,\n        $paymentMethode : String! ,\n        $taxPrice : Float!,\n        $shippingPrice: Float!,\n        $totalPrice: Float!,\n        $itemsPrice : Float!,\n        )\n        {\n            createOrder(\n                orderItems : $orderItems,\n                shippingAddress :  $shippingAddress,\n                paymentMethode : $paymentMethode,\n                taxPrice : $taxPrice,\n                shippingPrice: $shippingPrice,\n                totalPrice:  $totalPrice,\n                itemsPrice : $itemsPrice\n                 )\n                {\n                    _id\n                }\n        }\n        `;\n    const variables = {\n      orderItems: JSON.stringify(orderItems),\n      shippingAddress: JSON.stringify(shippingAddress),\n      paymentMethode,\n      taxPrice,\n      shippingPrice,\n      totalPrice,\n      itemsPrice\n    };\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: JSON.stringify({\n        query,\n        variables\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.updateUserProfile\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data ? error.response.data : \"error happend\";\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/order/orderAction.js"],"names":["Axios","orderTypes","createOrder","cart","dispatch","getState","orderItems","shippingAddress","paymentMethode","taxPrice","shippingPrice","totalPrice","itemsPrice","token","userReducer","userInfo","type","CREATE_ORDER_START","query","variables","JSON","stringify","data","method","url","headers","Authorization","CREATE_ORDER_SUCCESS","payload","updateUserProfile","error","errorMessage","response","errors","message","CREATE_ORDER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjE,QAAM;AACJC,IAAAA,UADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFT,IARJ;;AASA,MAAI;AACF,UAAMU,KAAK,GAAGR,QAAQ,GAAGS,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AACAT,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEf,UAAU,CAACgB;AADV,KAAD,CAAR;AAGA,UAAMC,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAxBI;AAyBA,UAAMC,SAAS,GAAG;AAChBb,MAAAA,UAAU,EAAEc,IAAI,CAACC,SAAL,CAAef,UAAf,CADI;AAEhBC,MAAAA,eAAe,EAAEa,IAAI,CAACC,SAAL,CAAed,eAAf,CAFD;AAGhBC,MAAAA,cAHgB;AAIhBC,MAAAA,QAJgB;AAKhBC,MAAAA,aALgB;AAMhBC,MAAAA,UANgB;AAOhBC,MAAAA;AAPgB,KAAlB;AASA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMtB,KAAK,CAAC;AAC3BuB,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,GAAG,EAAE,UAFsB;AAG3BF,MAAAA,IAAI,EAAEF,IAAI,CAACC,SAAL,CAAe;AACnBH,QAAAA,KADmB;AAEnBC,QAAAA;AAFmB,OAAf,CAHqB;AAO3BM,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASb,KAAM;AAFxB;AAPkB,KAAD,CAA5B;AAYAT,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEf,UAAU,CAAC0B,oBADV;AAEPC,MAAAA,OAAO,EAAEN,IAAI,CAACA,IAAL,CAAUO;AAFZ,KAAD,CAAR;AAID,GAvDD,CAuDE,OAAOC,KAAP,EAAc;AACd,UAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,GACjBH,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,CAA2B,CAA3B,EAA8BC,OADb,GAEjBJ,KAAK,CAACE,QAAN,CAAeV,IAAf,GACAQ,KAAK,CAACE,QAAN,CAAeV,IADf,GAEA,eAJJ;AAKAlB,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEf,UAAU,CAACkC,iBADV;AAEPP,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID;AACF,CA5EM","sourcesContent":["import Axios from \"axios\"\nimport orderTypes from \"./orderTypes\"\n\nexport const createOrder = (cart) => async (dispatch, getState) => {\n  const {\n    orderItems,\n    shippingAddress,\n    paymentMethode,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    itemsPrice,\n  } = cart\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START,\n    })\n    const query = `\n      mutation createOrder(\n        $orderItems : String!,\n        $shippingAddress : String!,\n        $paymentMethode : String! ,\n        $taxPrice : Float!,\n        $shippingPrice: Float!,\n        $totalPrice: Float!,\n        $itemsPrice : Float!,\n        )\n        {\n            createOrder(\n                orderItems : $orderItems,\n                shippingAddress :  $shippingAddress,\n                paymentMethode : $paymentMethode,\n                taxPrice : $taxPrice,\n                shippingPrice: $shippingPrice,\n                totalPrice:  $totalPrice,\n                itemsPrice : $itemsPrice\n                 )\n                {\n                    _id\n                }\n        }\n        `\n    const variables = {\n      orderItems: JSON.stringify(orderItems),\n      shippingAddress: JSON.stringify(shippingAddress),\n      paymentMethode,\n      taxPrice,\n      shippingPrice,\n      totalPrice,\n      itemsPrice,\n    }\n    const { data } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: JSON.stringify({\n        query,\n        variables,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.updateUserProfile,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n      ? error.response.data\n      : \"error happend\"\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}