{"ast":null,"code":"import Axios from \"axios\";\nimport adminTypes from \"./adminTypes\";\nexport const getUsersForAdmin = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: adminTypes.GET_USER_LIST_START\n    });\n    const query = `\n          query{\n            getAllUsersForAdmin{\n                  _id\n                  name\n                  email\n                  isAdmin\n              }\n          }\n        `;\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: adminTypes.GET_USER_LIST_SUCCESS,\n      payload: data.data.getAllUsersForAdmin\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n    dispatch({\n      type: adminTypes.GET_USER_LIST_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const removeUserFromUsersList = id => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: adminTypes.GET_USER_LIST_START\n    });\n    const query = `\n          query removeUserById($id:String!){\n            removeUserById(id :$id){\n                  _id\n                  name\n               \n              }\n          }\n        `;\n    const removeRequst = await Axios.post(\"/graphql\", {\n      query,\n      variables: {\n        id\n      }\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: adminTypes.REMOVE_USER_FROM_DATABASE,\n      payload: id\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n    dispatch({\n      type: adminTypes.REMOVE_USER_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/user/admin/adminAction.js"],"names":["Axios","adminTypes","getUsersForAdmin","dispatch","getState","token","userReducer","userInfo","type","GET_USER_LIST_START","query","data","method","url","headers","Authorization","GET_USER_LIST_SUCCESS","payload","getAllUsersForAdmin","error","errorMessage","response","errors","message","GET_USER_LIST_FAIL","removeUserFromUsersList","id","removeRequst","post","variables","REMOVE_USER_FROM_DATABASE","REMOVE_USER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,MAAI;AACF,UAAMC,KAAK,GAAGD,QAAQ,GAAGE,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AACAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAACQ;AADV,KAAD,CAAR;AAGA,UAAMC,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SATI;AAUA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAAC;AAC3BY,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,GAAG,EAAE,UAFsB;AAG3BF,MAAAA,IAAI,EAAE;AACJD,QAAAA;AADI,OAHqB;AAM3BI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASV,KAAM;AAFxB;AANkB,KAAD,CAA5B;AAWAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAACe,qBADV;AAEPC,MAAAA,OAAO,EAAEN,IAAI,CAACA,IAAL,CAAUO;AAFZ,KAAD,CAAR;AAID,GA9BD,CA8BE,OAAOC,KAAP,EAAc;AACd,UAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,GACjBH,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,CAA2B,CAA3B,EAA8BC,OADb,GAEjBJ,KAAK,CAACE,QAAN,CAAeV,IAFnB;AAGAR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAACuB,kBADV;AAEPP,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID;AACF,CAxCM;AA0CP,OAAO,MAAMK,uBAAuB,GAAIC,EAAD,IAAQ,OAAOvB,QAAP,EAAiBC,QAAjB,KAA8B;AAC3E,MAAI;AACF,UAAMC,KAAK,GAAGD,QAAQ,GAAGE,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AACAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAACQ;AADV,KAAD,CAAR;AAGA,UAAMC,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SARI;AASA,UAAMiB,YAAY,GAAG,MAAM3B,KAAK,CAAC4B,IAAN,CACzB,UADyB,EAEzB;AACElB,MAAAA,KADF;AAEEmB,MAAAA,SAAS,EAAE;AAAEH,QAAAA;AAAF;AAFb,KAFyB,EAMzB;AACEZ,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASV,KAAM;AAFxB;AADX,KANyB,CAA3B;AAcAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAAC6B,yBADV;AAEPb,MAAAA,OAAO,EAAES;AAFF,KAAD,CAAR;AAID,GAhCD,CAgCE,OAAOP,KAAP,EAAc;AACd,UAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,GACjBH,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,CAA2B,CAA3B,EAA8BC,OADb,GAEjBJ,KAAK,CAACE,QAAN,CAAeV,IAFnB;AAGAR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,UAAU,CAAC8B,gBADV;AAEPd,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID;AACF,CA1CM","sourcesContent":["import Axios from \"axios\"\nimport adminTypes from \"./adminTypes\"\n\nexport const getUsersForAdmin = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: adminTypes.GET_USER_LIST_START,\n    })\n    const query = `\n          query{\n            getAllUsersForAdmin{\n                  _id\n                  name\n                  email\n                  isAdmin\n              }\n          }\n        `\n    const { data } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    dispatch({\n      type: adminTypes.GET_USER_LIST_SUCCESS,\n      payload: data.data.getAllUsersForAdmin,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n    dispatch({\n      type: adminTypes.GET_USER_LIST_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n\nexport const removeUserFromUsersList = (id) => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: adminTypes.GET_USER_LIST_START,\n    })\n    const query = `\n          query removeUserById($id:String!){\n            removeUserById(id :$id){\n                  _id\n                  name\n               \n              }\n          }\n        `\n    const removeRequst = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables: { id },\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n\n    dispatch({\n      type: adminTypes.REMOVE_USER_FROM_DATABASE,\n      payload: id,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n    dispatch({\n      type: adminTypes.REMOVE_USER_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}