{"ast":null,"code":"import Axios from \"axios\";\nimport adminTypes from \"./adminTypes\";\nexport const getUsersForAdmin = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: adminTypes.GET_USER_LIST_START\n    });\n    const query = `\n          query{\n            getAllUsersForAdmin{\n                  _id\n                  name\n                  email\n                  isAdmin\n              }\n          }\n        `;\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: adminTypes.GET_USER_LIST_SUCCESS,\n      payload: data.data.getAllUsersForAdmin\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n    dispatch({\n      type: adminTypes.GET_USER_LIST_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const removeUserFromUsersList = id => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    const query = `\n          mutation removeUserById($id:String!){\n            removeUserById(id :$id){\n                  _id\n                  \n               \n              }\n          }\n        `;\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query,\n      variables: {\n        id\n      }\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: adminTypes.REMOVE_USER_FROM_DATA,\n      payload: data.data.removeUserById._id\n    });\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data, _error$response3;\n\n    console.log(error);\n    const errorMessage = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.errors) ? error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errors[0].message : error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data;\n    dispatch({\n      type: adminTypes.REMOVE_USER_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const getUserProfileForAdmin = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_START_FOR_ADMIN\n    });\n    const token = getState().userReducer.userInfo.token;\n    const query = `\n          query getUserByIdForAdmin($id:String!){\n            getUserByIdForAdmin(id :$id){\n                  _id\n                  name\n                  email\n                  isAdmin\n                  ordersList{\n                    _id\n                  }\n              }\n          }\n        `;\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query,\n      variables: {\n        id: id\n      }\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_SUCCESS_FOR_ADMIN,\n      payload: data.data.getUserByIdForAdmin\n    });\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data, _error$response6;\n\n    console.log(error);\n    const errorMessage = (error === null || error === void 0 ? void 0 : (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data.errors) ? error === null || error === void 0 ? void 0 : (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.errors[0].message : error === null || error === void 0 ? void 0 : (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data;\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_FAIL_FOR_ADMIN,\n      payload: errorMessage\n    });\n  }\n};\nexport const updateUserProfileForAdmin = ({\n  id,\n  adminPassword,\n  isAdmin,\n  name,\n  email\n}) => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    const query = `\n          query updateUserProfileForAdmin($id:String! , $name:String , $email:string , $adminPassword:String! , isAdmin: Boolean! ){\n            updateUserProfileForAdmin(id :$id name:$name , email:$email , adminPassword:$adminPassword , isAdmin: isAdmin!){\n                  _id\n                  name\n                  email\n                  isAdmin\n                  ordersList{\n                    _id\n                  }\n              }\n          }\n        `;\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query,\n      variables: {\n        id,\n        adminPassword,\n        isAdmin,\n        name,\n        email\n      }\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_SUCCESS_FOR_ADMIN,\n      payload: data.data.getUserByIdForAdmin\n    });\n  } catch (error) {\n    var _error$response7, _error$response8, _error$response8$data, _error$response9;\n\n    const errorMessage = (error === null || error === void 0 ? void 0 : (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data.errors) ? error === null || error === void 0 ? void 0 : (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.errors[0].message : error === null || error === void 0 ? void 0 : (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data;\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_FAIL_FOR_ADMIN,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/user/admin/adminAction.js"],"names":["Axios","adminTypes","getUsersForAdmin","dispatch","getState","token","userReducer","userInfo","type","GET_USER_LIST_START","query","data","method","url","headers","Authorization","GET_USER_LIST_SUCCESS","payload","getAllUsersForAdmin","error","errorMessage","response","errors","message","GET_USER_LIST_FAIL","removeUserFromUsersList","id","post","variables","REMOVE_USER_FROM_DATA","removeUserById","_id","console","log","REMOVE_USER_FAIL","getUserProfileForAdmin","GET_USER_PROFILE_START_FOR_ADMIN","GET_USER_PROFILE_SUCCESS_FOR_ADMIN","getUserByIdForAdmin","GET_USER_PROFILE_FAIL_FOR_ADMIN","updateUserProfileForAdmin","adminPassword","isAdmin","name","email"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\nimport adminTypes from \"./adminTypes\"\n\nexport const getUsersForAdmin = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: adminTypes.GET_USER_LIST_START,\n    })\n    const query = `\n          query{\n            getAllUsersForAdmin{\n                  _id\n                  name\n                  email\n                  isAdmin\n              }\n          }\n        `\n    const { data } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    dispatch({\n      type: adminTypes.GET_USER_LIST_SUCCESS,\n      payload: data.data.getAllUsersForAdmin,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n    dispatch({\n      type: adminTypes.GET_USER_LIST_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n\nexport const removeUserFromUsersList = (id) => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token\n    const query = `\n          mutation removeUserById($id:String!){\n            removeUserById(id :$id){\n                  _id\n                  \n               \n              }\n          }\n        `\n    const { data } = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables: { id },\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n    dispatch({\n      type: adminTypes.REMOVE_USER_FROM_DATA,\n      payload: data.data.removeUserById._id,\n    })\n  } catch (error) {\n    console.log(error)\n    const errorMessage = error?.response?.data.errors\n      ? error?.response?.data?.errors[0].message\n      : error?.response?.data\n    dispatch({\n      type: adminTypes.REMOVE_USER_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n\nexport const getUserProfileForAdmin = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_START_FOR_ADMIN,\n    })\n    const token = getState().userReducer.userInfo.token\n    const query = `\n          query getUserByIdForAdmin($id:String!){\n            getUserByIdForAdmin(id :$id){\n                  _id\n                  name\n                  email\n                  isAdmin\n                  ordersList{\n                    _id\n                  }\n              }\n          }\n        `\n  \n    const { data } = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables :{id : id},\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_SUCCESS_FOR_ADMIN,\n      payload: data.data.getUserByIdForAdmin,\n    })\n  } catch (error) {\n    console.log(error)\n    const errorMessage = error?.response?.data.errors\n      ? error?.response?.data?.errors[0].message\n      : error?.response?.data\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_FAIL_FOR_ADMIN,\n      payload: errorMessage,\n    })\n  }\n}\n\nexport const updateUserProfileForAdmin = ({id , adminPassword , isAdmin , name , email }) => async (dispatch, getState) => {\n  try {\n \n    const token = getState().userReducer.userInfo.token\n    const query = `\n          query updateUserProfileForAdmin($id:String! , $name:String , $email:string , $adminPassword:String! , isAdmin: Boolean! ){\n            updateUserProfileForAdmin(id :$id name:$name , email:$email , adminPassword:$adminPassword , isAdmin: isAdmin!){\n                  _id\n                  name\n                  email\n                  isAdmin\n                  ordersList{\n                    _id\n                  }\n              }\n          }\n        `\n  \n    const { data } = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables :{id ,adminPassword , isAdmin , name , email},\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_SUCCESS_FOR_ADMIN,\n      payload: data.data.getUserByIdForAdmin,\n    })\n  } catch (error) {\n    const errorMessage = error?.response?.data.errors\n      ? error?.response?.data?.errors[0].message\n      : error?.response?.data\n    dispatch({\n      type: adminTypes.GET_USER_PROFILE_FAIL_FOR_ADMIN,\n      payload: errorMessage,\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}