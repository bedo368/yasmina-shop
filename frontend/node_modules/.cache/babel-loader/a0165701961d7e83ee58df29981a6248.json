{"ast":null,"code":"import Axios from \"axios\";\nimport orderTypes from \"./orderTypes\";\nexport const createOrder = ({\n  orderItems,\n  shippingAddress,\n  paymentMethode,\n  taxPrice,\n  shippingPrice,\n  totalPrice,\n  itemsPrice\n}) => (dispatch, getState) => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START\n    });\n    const query = `\n      mutation($orderItems : String!\n        $shippingAddress : String!\n        $paymentMethode : String! \n        $taxPrice : Float!\n        $shippingPrice: Float!\n        $totalPrice: Float!\n        $itemsPrice : Float!){\n        createOrder($orderItems : $orderItems\n            $shippingAddress :  $shippingAddress\n            $paymentMethode : $paymentMethode\n            $taxPrice : $taxPrice\n            $shippingPrice: $shippingPrice\n            $totalPrice:  $totalPrice\n            $itemsPrice : $itemsPrice )\n            {\n                _id\n            }\n          }\n        `;\n    const variables = {};\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query,\n        variables\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.updateUserProfile\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data ? error.response.data : \"error happend\";\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/order/orderAction.js"],"names":["Axios","orderTypes","createOrder","orderItems","shippingAddress","paymentMethode","taxPrice","shippingPrice","totalPrice","itemsPrice","dispatch","getState","token","userReducer","userInfo","type","CREATE_ORDER_START","query","variables","data","method","url","headers","Authorization","CREATE_ORDER_SUCCESS","payload","updateUserProfile","error","errorMessage","response","errors","message","CREATE_ORDER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,MAAMC,WAAW,GAAI,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,eAAb;AAA6BC,EAAAA,cAA7B;AAA4CC,EAAAA,QAA5C;AAAqDC,EAAAA,aAArD;AAAmEC,EAAAA,UAAnE;AAA8EC,EAAAA;AAA9E,CAAD,KAA+F,CAACC,QAAD,EAAYC,QAAZ,KAAwB,OAC/ID,QAD+I,EAE/IC,QAF+I,KAG5I;AAGH,MAAI;AACF,UAAMC,KAAK,GAAGD,QAAQ,GAAGE,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AACAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,UAAU,CAACe;AADV,KAAD,CAAR;AAGA,UAAMC,KAAK,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAnBM;AAoBI,UAAMC,SAAS,GAAG,EAAlB;AACJ,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMnB,KAAK,CAAC;AAC3BoB,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,GAAG,EAAE,UAFsB;AAG3BF,MAAAA,IAAI,EAAE;AACJF,QAAAA,KADI;AAEJC,QAAAA;AAFI,OAHqB;AAO3BI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASX,KAAM;AAFxB;AAPkB,KAAD,CAA5B;AAYAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,UAAU,CAACuB,oBADV;AAEPC,MAAAA,OAAO,EAAEN,IAAI,CAACA,IAAL,CAAUO;AAFZ,KAAD,CAAR;AAMD,GA5CD,CA4CE,OAAOC,KAAP,EAAc;AACd,UAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,GACjBH,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,MAApB,CAA2B,CAA3B,EAA8BC,OADb,GAEjBJ,KAAK,CAACE,QAAN,CAAeV,IAAf,GACAQ,KAAK,CAACE,QAAN,CAAeV,IADf,GAEA,eAJJ;AAKAT,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,UAAU,CAAC+B,iBADV;AAEPP,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID;AACF,CA7DI","sourcesContent":["import Axios from \"axios\"\nimport orderTypes from \"./orderTypes\"\n\nexport const createOrder =  ({orderItems ,shippingAddress,paymentMethode,taxPrice,shippingPrice,totalPrice,itemsPrice })=> (dispatch , getState)=> async (\n    dispatch,\n    getState\n  ) => {\n   \n  \n    try {\n      const token = getState().userReducer.userInfo.token\n      dispatch({\n        type: orderTypes.CREATE_ORDER_START,\n      })\n      const query = `\n      mutation($orderItems : String!\n        $shippingAddress : String!\n        $paymentMethode : String! \n        $taxPrice : Float!\n        $shippingPrice: Float!\n        $totalPrice: Float!\n        $itemsPrice : Float!){\n        createOrder($orderItems : $orderItems\n            $shippingAddress :  $shippingAddress\n            $paymentMethode : $paymentMethode\n            $taxPrice : $taxPrice\n            $shippingPrice: $shippingPrice\n            $totalPrice:  $totalPrice\n            $itemsPrice : $itemsPrice )\n            {\n                _id\n            }\n          }\n        `\n          const variables = {}\n      const { data } = await Axios({\n        method: \"POST\",\n        url: \"/graphql\",\n        data: {\n          query,\n          variables \n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      dispatch({\n        type: orderTypes.CREATE_ORDER_SUCCESS,\n        payload: data.data.updateUserProfile,\n      })\n   \n  \n    } catch (error) {\n      const errorMessage = error.response.data.errors\n        ? error.response.data.errors[0].message\n        : error.response.data\n        ? error.response.data\n        : \"error happend\"\n      dispatch({\n        type: orderTypes.CREATE_ORDER_FAIL,\n        payload: errorMessage,\n      })\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}