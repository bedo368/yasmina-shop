{"ast":null,"code":"import Axios from \"axios\";\nimport orderTypes from \"./orderTypes\";\nexport const createOrder = cart => async (dispatch, getState) => {\n  const {\n    cartItems,\n    shippingAddress,\n    paymentMethod,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    itemsPrice\n  } = cart;\n  console.log();\n  const shippingAddressWithProductID = { ...shippingAddress,\n    product: shippingAddress._id\n  };\n\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START\n    });\n    const query = `\n      mutation CreateOrder(\n        $orderItems : String!,\n        $shippingAddress : String!,\n        $paymentMethod : String! ,\n        $taxPrice : Float!,\n        $shippingPrice: Float!,\n        $totalPrice: Float!,\n        $itemsPrice : Float!,\n        )\n        {\n            CreateOrder(\n                orderItems : $orderItems,\n                shippingAddress :  $shippingAddress,\n                paymentMethod : $paymentMethod,\n                taxPrice : $taxPrice,\n                shippingPrice: $shippingPrice,\n                totalPrice:  $totalPrice,\n                itemsPrice : $itemsPrice\n                 )\n                {\n                    _id\n                }\n        }\n        `;\n    const variables = {\n      orderItems: JSON.stringify(cartItems),\n      shippingAddress: JSON.stringify(shippingAddressWithProductID),\n      paymentMethod,\n      taxPrice: 12.23,\n      shippingPrice,\n      totalPrice: 12.23,\n      itemsPrice\n    };\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query,\n      variables\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.updateUserProfile\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data ? error.response.data : \"error happend\";\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/order/orderAction.js"],"names":["Axios","orderTypes","createOrder","cart","dispatch","getState","cartItems","shippingAddress","paymentMethod","taxPrice","shippingPrice","totalPrice","itemsPrice","console","log","shippingAddressWithProductID","product","_id","token","userReducer","userInfo","type","CREATE_ORDER_START","query","variables","orderItems","JSON","stringify","data","post","headers","Authorization","CREATE_ORDER_SUCCESS","payload","updateUserProfile","error","errorMessage","response","errors","message","CREATE_ORDER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjE,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFT,IARJ;AASAU,EAAAA,OAAO,CAACC,GAAR;AACA,QAAMC,4BAA4B,GAAG,EAAC,GAAGR,eAAJ;AAAsBS,IAAAA,OAAO,EAAET,eAAe,CAACU;AAA/C,GAArC;;AACA,MAAI;AACF,UAAMC,KAAK,GAAGb,QAAQ,GAAGc,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AACAd,IAAAA,QAAQ,CAAC;AACPiB,MAAAA,IAAI,EAAEpB,UAAU,CAACqB;AADV,KAAD,CAAR;AAGA,UAAMC,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAxBI;AA0BA,UAAMC,SAAS,GAAG;AAChBC,MAAAA,UAAU,EAAEC,IAAI,CAACC,SAAL,CAAerB,SAAf,CADI;AAEhBC,MAAAA,eAAe,EAACmB,IAAI,CAACC,SAAL,CAAeZ,4BAAf,CAFA;AAGhBP,MAAAA,aAHgB;AAIhBC,MAAAA,QAAQ,EAAC,KAJO;AAKhBC,MAAAA,aALgB;AAMhBC,MAAAA,UAAU,EAAC,KANK;AAOhBC,MAAAA;AAPgB,KAAlB;AASA,UAAM;AAAEgB,MAAAA;AAAF,QAAW,MAAM5B,KAAK,CAAC6B,IAAN,CAAW,UAAX,EAAsB;AAC3CN,MAAAA,KAD2C;AAE3CC,MAAAA;AAF2C,KAAtB,EAIrB;AAACM,MAAAA,OAAO,EAAE;AACR,wBAAgB,kBADR;AAERC,QAAAA,aAAa,EAAG,UAASb,KAAM;AAFvB;AAAV,KAJqB,CAAvB;AAQAd,IAAAA,QAAQ,CAAC;AACPiB,MAAAA,IAAI,EAAEpB,UAAU,CAAC+B,oBADV;AAEPC,MAAAA,OAAO,EAAEL,IAAI,CAACA,IAAL,CAAUM;AAFZ,KAAD,CAAR;AAID,GApDD,CAoDE,OAAOC,KAAP,EAAc;AACd,UAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeT,IAAf,CAAoBU,MAApB,GACjBH,KAAK,CAACE,QAAN,CAAeT,IAAf,CAAoBU,MAApB,CAA2B,CAA3B,EAA8BC,OADb,GAEjBJ,KAAK,CAACE,QAAN,CAAeT,IAAf,GACAO,KAAK,CAACE,QAAN,CAAeT,IADf,GAEA,eAJJ;AAKAxB,IAAAA,QAAQ,CAAC;AACPiB,MAAAA,IAAI,EAAEpB,UAAU,CAACuC,iBADV;AAEPP,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID;AACF,CA3EM","sourcesContent":["import Axios from \"axios\"\nimport orderTypes from \"./orderTypes\"\n\nexport const createOrder = (cart) => async (dispatch, getState) => {\n  const {\n    cartItems,\n    shippingAddress,\n    paymentMethod,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    itemsPrice,\n  } = cart\n  console.log();\n  const shippingAddressWithProductID = {...shippingAddress , product :shippingAddress._id }\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START,\n    })\n    const query = `\n      mutation CreateOrder(\n        $orderItems : String!,\n        $shippingAddress : String!,\n        $paymentMethod : String! ,\n        $taxPrice : Float!,\n        $shippingPrice: Float!,\n        $totalPrice: Float!,\n        $itemsPrice : Float!,\n        )\n        {\n            CreateOrder(\n                orderItems : $orderItems,\n                shippingAddress :  $shippingAddress,\n                paymentMethod : $paymentMethod,\n                taxPrice : $taxPrice,\n                shippingPrice: $shippingPrice,\n                totalPrice:  $totalPrice,\n                itemsPrice : $itemsPrice\n                 )\n                {\n                    _id\n                }\n        }\n        `\n        \n    const variables = {\n      orderItems: JSON.stringify(cartItems),\n      shippingAddress:JSON.stringify(shippingAddressWithProductID),\n      paymentMethod,\n      taxPrice:12.23,\n      shippingPrice,\n      totalPrice:12.23,\n      itemsPrice,\n    }\n    const { data } = await Axios.post(\"/graphql\",{\n      query,\n      variables,\n      \n    },{headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      }})\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.updateUserProfile,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n      ? error.response.data\n      : \"error happend\"\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}