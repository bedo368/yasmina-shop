{"ast":null,"code":"import Axios from \"axios\";\nimport orderTypes from \"./orderTypes\";\nexport const createOrder = cart => async (dispatch, getState) => {\n  const {\n    cartItems,\n    shippingAddress,\n    paymentMethod,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    itemsPrice\n  } = cart;\n\n  try {\n    const token = getState().userReducer.userInfo.token;\n    console.log(token);\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START\n    });\n    const query = `\n      mutation CreateOrder(\n        $orderItems : String!,\n        $shippingAddress : String!,\n        $paymentMethod : String! ,\n        $taxPrice : Float!,\n        $shippingPrice: Float!,\n        $totalPrice: Float!,\n        $itemsPrice : Float!,\n        )\n        {\n            CreateOrder(\n                orderItems : $orderItems,\n                shippingAddress :  $shippingAddress,\n                paymentMethod : $paymentMethod,\n                taxPrice : $taxPrice,\n                shippingPrice: $shippingPrice,\n                totalPrice:  $totalPrice,\n                itemsPrice : $itemsPrice\n                 )\n                {\n                    _id\n                    orderItems {\n                      qty\n                      name\n                      image\n                      price\n                     \n                    }\n                   \n                    paymentMethod \n                    taxPrice \n                    shippingPrice\n                    totalPrice\n                   \n                }\n        }\n        `;\n    console.log(cartItems);\n    const orderItemsWithProductInstedOF_id = cartItems.map(item => {\n      return {\n        countInStock: item.countInStock,\n        image: item.image,\n        name: item.name,\n        price: item.price,\n        qty: item.qty,\n        product: item._id\n      };\n    });\n    const variables = {\n      orderItems: JSON.stringify(orderItemsWithProductInstedOF_id),\n      shippingAddress: JSON.stringify(shippingAddress),\n      paymentMethod,\n      taxPrice,\n      shippingPrice,\n      totalPrice,\n      itemsPrice\n    };\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query,\n      variables\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.CreateOrder\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data ? error.response.data : \"error happend\";\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const getOrderById = ({\n  id\n}) => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    console.log(token);\n    dispatch({\n      type: orderTypes.ORDER_DETAIL_START\n    });\n    const query = `query getOrderById($id:String!){\n      getOrderById(id:$id){\n          _id\n          orderItems{\n              _id\n              name\n              image\n              price\n              product{\n                  _id\n              }\n          }\n          shippingAddress{\n               city\n               address\n               postalCode\n               country\n            }\n          paymentMethod \n          taxPrice \n          shippingPrice\n          totalPrice\n          orderCreator{\n              _id\n              name\n              email\n          \n          }\n          createdAt\n          updatedAt\n      }\n  }`;\n    const variables = {\n      id\n    };\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query,\n      variables\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: orderTypes.ORDER_DETAIL_SUCCESS,\n      payload: data.data.getOrderById\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data ? error.response.data : \"error happend\";\n    dispatch({\n      type: orderTypes.ORDER_DETAIL_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/order/orderAction.js"],"names":["Axios","orderTypes","createOrder","cart","dispatch","getState","cartItems","shippingAddress","paymentMethod","taxPrice","shippingPrice","totalPrice","itemsPrice","token","userReducer","userInfo","console","log","type","CREATE_ORDER_START","query","orderItemsWithProductInstedOF_id","map","item","countInStock","image","name","price","qty","product","_id","variables","orderItems","JSON","stringify","data","post","headers","Authorization","CREATE_ORDER_SUCCESS","payload","CreateOrder","error","errorMessage","response","errors","message","CREATE_ORDER_FAIL","getOrderById","id","ORDER_DETAIL_START","ORDER_DETAIL_SUCCESS","ORDER_DETAIL_FAIL"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\nimport orderTypes from \"./orderTypes\"\n\nexport const createOrder = (cart) => async (dispatch, getState) => {\n  const {\n    cartItems,\n    shippingAddress,\n    paymentMethod,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    itemsPrice,\n  } = cart\n  try {\n    const token = getState().userReducer.userInfo.token\n    console.log(token)\n    dispatch({\n      type: orderTypes.CREATE_ORDER_START,\n    })\n    const query = `\n      mutation CreateOrder(\n        $orderItems : String!,\n        $shippingAddress : String!,\n        $paymentMethod : String! ,\n        $taxPrice : Float!,\n        $shippingPrice: Float!,\n        $totalPrice: Float!,\n        $itemsPrice : Float!,\n        )\n        {\n            CreateOrder(\n                orderItems : $orderItems,\n                shippingAddress :  $shippingAddress,\n                paymentMethod : $paymentMethod,\n                taxPrice : $taxPrice,\n                shippingPrice: $shippingPrice,\n                totalPrice:  $totalPrice,\n                itemsPrice : $itemsPrice\n                 )\n                {\n                    _id\n                    orderItems {\n                      qty\n                      name\n                      image\n                      price\n                     \n                    }\n                   \n                    paymentMethod \n                    taxPrice \n                    shippingPrice\n                    totalPrice\n                   \n                }\n        }\n        `\n    console.log(cartItems)\n    const orderItemsWithProductInstedOF_id = cartItems.map((item) => {\n      return {\n        countInStock: item.countInStock,\n        image: item.image,\n        name: item.name,\n        price: item.price,\n        qty: item.qty,\n        product: item._id,\n      }\n    })\n    const variables = {\n      orderItems: JSON.stringify(orderItemsWithProductInstedOF_id),\n      shippingAddress: JSON.stringify(shippingAddress),\n      paymentMethod,\n      taxPrice,\n      shippingPrice,\n      totalPrice,\n      itemsPrice,\n    }\n    const { data } = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables,\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n    dispatch({\n      type: orderTypes.CREATE_ORDER_SUCCESS,\n      payload: data.data.CreateOrder,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n      ? error.response.data\n      : \"error happend\"\n    dispatch({\n      type: orderTypes.CREATE_ORDER_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n\nexport const getOrderById = ({ id }) => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token\n    console.log(token)\n    dispatch({\n      type: orderTypes.ORDER_DETAIL_START,\n    })\n    const query = `query getOrderById($id:String!){\n      getOrderById(id:$id){\n          _id\n          orderItems{\n              _id\n              name\n              image\n              price\n              product{\n                  _id\n              }\n          }\n          shippingAddress{\n               city\n               address\n               postalCode\n               country\n            }\n          paymentMethod \n          taxPrice \n          shippingPrice\n          totalPrice\n          orderCreator{\n              _id\n              name\n              email\n          \n          }\n          createdAt\n          updatedAt\n      }\n  }`\n\n    const variables = {id}\n    const { data } = await Axios.post(\n      \"/graphql\",\n      {\n        query,\n        variables,\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    )\n    dispatch({\n      type: orderTypes.ORDER_DETAIL_SUCCESS,\n      payload: data.data.getOrderById,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n      ? error.response.data\n      : \"error happend\"\n    dispatch({\n      type: orderTypes.ORDER_DETAIL_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}