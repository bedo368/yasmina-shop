{"ast":null,"code":"import userProfilTypes from \"./userProfileTypes\";\nimport Axios from \"axios\";\nimport userTypes from \"../userTypes\";\nexport const getUserProfile = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: userProfilTypes.USER_GET_PROFILE_START\n    });\n    const query = `\n        query{\n            getUserProfile{\n                name\n                email\n                isAdmin\n            }\n        }\n      `;\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: userProfilTypes.USER_GET_PROFILE_SUCCESS,\n      payload: data.data.getUserProfile\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n    dispatch({\n      type: userProfilTypes.USER_GET_PROFILE_FAIL,\n      payload: errorMessage\n    });\n  }\n};\nexport const updateUserProfile = (name, email, newPassword, oldPassword) => async (dispatch, getState) => {\n  if (!oldPassword) {\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_FAIL,\n      payload: \"enter your old password \"\n    });\n    return;\n  }\n\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_START\n    });\n    const query = `\n    mutation{\n          updateUserProfile(email:\"${email}\" , password:\"${newPassword}\" , name:\"${name}\" , oldPassword:\"${oldPassword}\" ){\n                name\n                email\n                isAdmin\n            }\n        }\n      `;\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_SUCCESS,\n      payload: data.data.updateUserProfile\n    });\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_SUCCESS,\n      payload: data.data.updateUserProfile\n    });\n  } catch (error) {\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data ? error.response.data : \"error happend\";\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/user/userProfile/userProfileAction.js"],"names":["userProfilTypes","Axios","userTypes","getUserProfile","dispatch","getState","token","userReducer","userInfo","type","USER_GET_PROFILE_START","query","data","method","url","headers","Authorization","USER_GET_PROFILE_SUCCESS","payload","error","errorMessage","response","errors","message","USER_GET_PROFILE_FAIL","updateUserProfile","name","email","newPassword","oldPassword","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_START","USER_UPDATE_PROFILE_SUCCESS"],"mappings":"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","sourcesContent":["import userProfilTypes from \"./userProfileTypes\"\nimport Axios from \"axios\"\nimport userTypes from \"../userTypes\"\nexport const getUserProfile = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: userProfilTypes.USER_GET_PROFILE_START,\n    })\n    const query = `\n        query{\n            getUserProfile{\n                name\n                email\n                isAdmin\n            }\n        }\n      `\n    const { data } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    dispatch({\n      type: userProfilTypes.USER_GET_PROFILE_SUCCESS,\n      payload: data.data.getUserProfile,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n    dispatch({\n      type: userProfilTypes.USER_GET_PROFILE_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n\nexport const updateUserProfile = (name, email, newPassword, oldPassword) => async (\n  dispatch,\n  getState\n) => {\n  if (!oldPassword) {\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_FAIL,\n      payload: \"enter your old password \",\n    })\n    return\n  }\n\n  try {\n    const token = getState().userReducer.userInfo.token\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_START,\n    })\n    const query = `\n    mutation{\n          updateUserProfile(email:\"${email}\" , password:\"${newPassword}\" , name:\"${name}\" , oldPassword:\"${oldPassword}\" ){\n                name\n                email\n                isAdmin\n            }\n        }\n      `\n    const { data } = await Axios({\n      method: \"POST\",\n      url: \"/graphql\",\n      data: {\n        query,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_SUCCESS,\n      payload: data.data.updateUserProfile,\n    })\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_SUCCESS,\n      payload: data.data.updateUserProfile,\n    })\n  } catch (error) {\n    const errorMessage = error.response.data.errors\n      ? error.response.data.errors[0].message\n      : error.response.data\n      ? error.response.data\n      : \"error happend\"\n    dispatch({\n      type: userProfilTypes.USER_UPDATE_PROFILE_FAIL,\n      payload: errorMessage,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}