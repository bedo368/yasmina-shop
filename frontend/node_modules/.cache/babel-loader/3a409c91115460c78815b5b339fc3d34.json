{"ast":null,"code":"import Axios from \"axios\";\nimport getLogedInUserOrdersTypes from \"./getLogedInUserOrdersTypes\";\nexport const getLogedInUserOrders = () => async (dispatch, getState) => {\n  try {\n    const token = getState().userReducer.userInfo.token;\n    dispatch({\n      type: getLogedInUserOrdersTypes.GET_LOGED_IN_USER_ORDERS_START\n    });\n    const query = `query {\n        getAllLogedInUserOrders{\n            _id\n         \n           \n            itemsPrice\n            paymentMethod \n            taxPrice \n            shippingPrice\n            totalPrice\n            orderCreator{\n                _id\n                name\n                email\n            \n            }\n            isPaid\n            isDelivered\n            createdAt\n            updatedAt\n        }\n    }`;\n    const {\n      data\n    } = await Axios.post(\"/graphql\", {\n      query\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: getLogedInUserOrdersTypes.GET_LOGED_IN_USER_ORDERS_SUCCESS,\n      payload: data.data.getAllLogedInUserOrders\n    });\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response4;\n\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.errors) ? (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.errors[0].message : ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) ? (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data : \"error happend\";\n    dispatch({\n      type: getLogedInUserOrdersTypes.GET_LOGED_IN_USER_ORDERS_FAIL,\n      payload: errorMessage\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/order/getLogedInUserOrders/getLogedInUserOrderAction.js"],"names":["Axios","getLogedInUserOrdersTypes","getLogedInUserOrders","dispatch","getState","token","userReducer","userInfo","type","GET_LOGED_IN_USER_ORDERS_START","query","data","post","headers","Authorization","GET_LOGED_IN_USER_ORDERS_SUCCESS","payload","getAllLogedInUserOrders","error","errorMessage","response","errors","message","GET_LOGED_IN_USER_ORDERS_FAIL"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AAGA,OAAO,MAAMC,oBAAoB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,MAAI;AACF,UAAMC,KAAK,GAAGD,QAAQ,GAAGE,WAAX,CAAuBC,QAAvB,CAAgCF,KAA9C;AACAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,yBAAyB,CAACQ;AADzB,KAAD,CAAR;AAGA,UAAMC,KAAK,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MArBM;AAuBA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACY,IAAN,CACrB,UADqB,EAErB;AACEF,MAAAA;AADF,KAFqB,EAKrB;AACEG,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAAST,KAAM;AAFxB;AADX,KALqB,CAAvB;AAYAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAACP,yBAAyB,CAACc,gCADxB;AAEPC,MAAAA,OAAO,EAAEL,IAAI,CAACA,IAAL,CAAUM;AAFZ,KAAD,CAAR;AAID,GA5CD,CA4CE,OAAOC,KAAP,EAAc;AAAA;;AACd,UAAMC,YAAY,GAAG,oBAAAD,KAAK,CAACE,QAAN,oEAAgBT,IAAhB,CAAqBU,MAArB,wBACjBH,KAAK,CAACE,QADW,qDACjB,iBAAgBT,IAAhB,CAAqBU,MAArB,CAA4B,CAA5B,EAA+BC,OADd,GAEjB,qBAAAJ,KAAK,CAACE,QAAN,sEAAgBT,IAAhB,wBACAO,KAAK,CAACE,QADN,qDACA,iBAAgBT,IADhB,GAEA,eAJJ;AAKAR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,yBAAyB,CAACsB,6BADzB;AAEPP,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID;AACF,CAxDI","sourcesContent":["\nimport Axios from \"axios\"\nimport getLogedInUserOrdersTypes from \"./getLogedInUserOrdersTypes\"\n\n\nexport const getLogedInUserOrders = () => async (dispatch, getState) => {\n    try {\n      const token = getState().userReducer.userInfo.token\n      dispatch({\n        type: getLogedInUserOrdersTypes.GET_LOGED_IN_USER_ORDERS_START,\n      })\n      const query = `query {\n        getAllLogedInUserOrders{\n            _id\n         \n           \n            itemsPrice\n            paymentMethod \n            taxPrice \n            shippingPrice\n            totalPrice\n            orderCreator{\n                _id\n                name\n                email\n            \n            }\n            isPaid\n            isDelivered\n            createdAt\n            updatedAt\n        }\n    }`\n  \n      const { data } = await Axios.post(\n        \"/graphql\",\n        {\n          query,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      dispatch({\n        type:getLogedInUserOrdersTypes.GET_LOGED_IN_USER_ORDERS_SUCCESS ,\n        payload: data.data.getAllLogedInUserOrders,\n      })\n    } catch (error) {\n      const errorMessage = error.response?.data.errors\n        ? error.response?.data.errors[0].message\n        : error.response?.data\n        ? error.response?.data\n        : \"error happend\"\n      dispatch({\n        type: getLogedInUserOrdersTypes.GET_LOGED_IN_USER_ORDERS_FAIL,\n        payload: errorMessage,\n      })\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}