{"ast":null,"code":"import adminTypes from \"./adminTypes\";\nconst intial_state = {\n  usersFetchState: true,\n  usersList: [],\n  getUserFetchState: true\n};\n\nconst adminReducer = (state = intial_state, action) => {\n  switch (action.type) {\n    // get all  users data\n    case adminTypes.GET_USER_LIST_START:\n      return {\n        usersFetchState: true\n      };\n\n    case adminTypes.GET_USER_LIST_SUCCESS:\n      return {\n        usersFetchState: false,\n        usersList: action.payload\n      };\n\n    case adminTypes.GET_USER_LIST_FAIL:\n      console.log(action.payload);\n      return {\n        usersFetchState: false,\n        usersListErrorMessage: action.payload\n      };\n    // remove user and thie orders  from database\n\n    case \"REMOVE_USER_FROM_DATA\":\n      return {\n        usersList: state.usersList.filter(user => user._id !== action.payload)\n      };\n\n    case adminTypes.REMOVE_USER_FAIL:\n      return { ...state,\n        deleteUserErrorMessage: action.payload\n      };\n\n    case adminTypes.GET_USER_PROFILE_START_FOR_ADMIN:\n      return { ...intial_state\n      };\n\n    case adminTypes.GET_USER_PROFILE_SUCCESS_FOR_ADMIN:\n      return {\n        getUserFetchState: false,\n        UserForAdmin: action.payload\n      };\n\n    case adminTypes.GET_USER_PROFILE_FAIL_FOR_ADMIN:\n      return {\n        UserForAdminError: action.payload\n      };\n\n    case adminTypes.REST_ADMIN:\n      return intial_state;\n\n    default:\n      return state;\n  }\n};\n\nexport default adminReducer;","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/user/admin/adminReducer.js"],"names":["adminTypes","intial_state","usersFetchState","usersList","getUserFetchState","adminReducer","state","action","type","GET_USER_LIST_START","GET_USER_LIST_SUCCESS","payload","GET_USER_LIST_FAIL","console","log","usersListErrorMessage","filter","user","_id","REMOVE_USER_FAIL","deleteUserErrorMessage","GET_USER_PROFILE_START_FOR_ADMIN","GET_USER_PROFILE_SUCCESS_FOR_ADMIN","UserForAdmin","GET_USER_PROFILE_FAIL_FOR_ADMIN","UserForAdminError","REST_ADMIN"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,SAAS,EAAE,EAApC;AAAwCC,EAAAA,iBAAiB,EAAE;AAA3D,CAArB;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE;AAEA,SAAKR,UAAU,CAACS,mBAAhB;AACE,aAAO;AAAEP,QAAAA,eAAe,EAAE;AAAnB,OAAP;;AACF,SAAKF,UAAU,CAACU,qBAAhB;AACE,aAAO;AAAER,QAAAA,eAAe,EAAE,KAAnB;AAA0BC,QAAAA,SAAS,EAAEI,MAAM,CAACI;AAA5C,OAAP;;AACF,SAAKX,UAAU,CAACY,kBAAhB;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACI,OAAnB;AACA,aAAO;AAAET,QAAAA,eAAe,EAAE,KAAnB;AAA0Ba,QAAAA,qBAAqB,EAAER,MAAM,CAACI;AAAxD,OAAP;AACF;;AACA,SAAK,uBAAL;AACE,aAAO;AACLR,QAAAA,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBa,MAAhB,CAAwBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaX,MAAM,CAACI,OAArD;AADN,OAAP;;AAGF,SAAKX,UAAU,CAACmB,gBAAhB;AACE,aAAO,EAAE,GAAGb,KAAL;AAAYc,QAAAA,sBAAsB,EAAEb,MAAM,CAACI;AAA3C,OAAP;;AAEF,SAAKX,UAAU,CAACqB,gCAAhB;AACE,aAAO,EAAE,GAAGpB;AAAL,OAAP;;AAEF,SAAKD,UAAU,CAACsB,kCAAhB;AACE,aAAO;AAAElB,QAAAA,iBAAiB,EAAE,KAArB;AAA4BmB,QAAAA,YAAY,EAAEhB,MAAM,CAACI;AAAjD,OAAP;;AACF,SAAKX,UAAU,CAACwB,+BAAhB;AACE,aAAO;AAAEC,QAAAA,iBAAiB,EAAElB,MAAM,CAACI;AAA5B,OAAP;;AAEF,SAAKX,UAAU,CAAC0B,UAAhB;AACE,aAAOzB,YAAP;;AAEF;AACE,aAAOK,KAAP;AA9BJ;AAgCD,CAjCD;;AAmCA,eAAeD,YAAf","sourcesContent":["import adminTypes from \"./adminTypes\"\nconst intial_state = { usersFetchState: true, usersList: [], getUserFetchState: true }\n\nconst adminReducer = (state = intial_state, action) => {\n  switch (action.type) {\n    // get all  users data\n\n    case adminTypes.GET_USER_LIST_START:\n      return { usersFetchState: true }\n    case adminTypes.GET_USER_LIST_SUCCESS:\n      return { usersFetchState: false, usersList: action.payload }\n    case adminTypes.GET_USER_LIST_FAIL:\n      console.log(action.payload)\n      return { usersFetchState: false, usersListErrorMessage: action.payload }\n    // remove user and thie orders  from database\n    case \"REMOVE_USER_FROM_DATA\":\n      return {\n        usersList: state.usersList.filter((user) => user._id !== action.payload),\n      }\n    case adminTypes.REMOVE_USER_FAIL:\n      return { ...state, deleteUserErrorMessage: action.payload }\n\n    case adminTypes.GET_USER_PROFILE_START_FOR_ADMIN:\n      return { ...intial_state }\n\n    case adminTypes.GET_USER_PROFILE_SUCCESS_FOR_ADMIN:\n      return { getUserFetchState: false, UserForAdmin: action.payload }\n    case adminTypes.GET_USER_PROFILE_FAIL_FOR_ADMIN:\n      return { UserForAdminError: action.payload }\n\n    case adminTypes.REST_ADMIN:\n      return intial_state\n\n    default:\n      return state\n  }\n}\n\nexport default adminReducer\n"]},"metadata":{},"sourceType":"module"}