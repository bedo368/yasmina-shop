{"ast":null,"code":"import cartTypes from \"./cartTypes\";\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\");\nconst intialState = {\n  cartItems: []\n};\n\nconst cartReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case cartTypes.CART_ADD_ITEM:\n      const item = action.payload;\n      const existItem = state.cartItems.find(x => x.product === item.product);\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/mnt/d/react&bac/mern-shop/frontend/src/redux/cart/cartReducer.js"],"names":["cartTypes","cartItemsFromStorage","localStorage","getItem","intialState","cartItems","cartReducer","state","action","type","CART_ADD_ITEM","item","payload","existItem","find","x","product","map"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAA7B;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,SAAS,EAAE;AADO,CAApB;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,WAAT,EAAsBI,MAAtB,KAAiC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,SAAS,CAACU,aAAf;AACE,YAAMC,IAAI,GAAGH,MAAM,CAACI,OAApB;AACA,YAAMC,SAAS,GAAGN,KAAK,CAACF,SAAN,CAAgBS,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA/C,CAAlB;;AACA,UAAIH,SAAJ,EAAe;AACb,eAAO,EACL,GAAGN,KADE;AAELF,UAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBY,GAAhB,CAAqBF,CAAD,IAC7BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CADhC;AAFN,SAAP;AAMD,OAPD,MAOO;AACL,eAAO,EACL,GAAGR,KADE;AAELF,UAAAA,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACF,SAAV,EAAqBM,IAArB;AAFN,SAAP;AAID;;AACD;;AAEF;AACE,aAAOJ,KAAP;AApBJ;AAsBD,CAvBD;;AAyBA,eAAeD,WAAf","sourcesContent":["import cartTypes from \"./cartTypes\"\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\n\nconst intialState = {\n  cartItems: [],\n}\nconst cartReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case cartTypes.CART_ADD_ITEM:\n      const item = action.payload\n      const existItem = state.cartItems.find((x) => x.product === item.product)\n      if (existItem) {\n        return {\n          ...state,\n          cartItems: state.cartItems.map((x) =>\n            x.product === existItem.product ? item : x\n          ),\n        }\n      } else {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, item],\n        }\n      }\n      break\n\n    default:\n      return state\n  }\n}\n\nexport default cartReducer"]},"metadata":{},"sourceType":"module"}