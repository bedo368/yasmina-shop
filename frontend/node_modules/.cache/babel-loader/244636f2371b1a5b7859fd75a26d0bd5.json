{"ast":null,"code":"import Axios from \"axios\";\nimport productTypes from \"./productTypes\";\n\nconst fitchProductStart = () => {\n  return {\n    type: productTypes.FETCH_PRODUCT_START\n  };\n};\n\nconst fitchProductSuccess = product => {\n  return {\n    type: productTypes.FETCH_PRODUCT_SUCCESS,\n    payload: product\n  };\n};\n\nconst fitchProductfail = error => {\n  return {\n    type: productTypes.FETCH_PRODUCT_FAIL,\n    payload: error\n  };\n};\n\nexport const fetchProductAscync = id => {\n  console.log(\"gggg\");\n  return dispatch => {\n    dispatch(fitchProductStart());\n    const query = `\n     query getProductById($id: String!) {\n        getProductById(id : $id) {\n         _id\n         name\n         image\n         brand\n         price\n         rating\n         numReviews\n         category\n         description\n         countInStock\n         \n         \n       }\n     }\n     `;\n    Axios({\n      method: \"POST\",\n      data: {\n        query,\n        variables: {\n          id\n        }\n      },\n      url: \"/graphql\"\n    }).then(res => {\n      dispatch(fitchProductSuccess(res.data.data.getProductById));\n    }).catch(error => {\n      const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n      dispatch(fitchProductfail(errorMessage));\n    });\n  };\n};\nexport const createNewProduct = ({\n  name,\n  image,\n  brand,\n  price,\n  category,\n  description,\n  countInStock,\n  imageUpload\n}) => async (dispatch, getState) => {\n  dispatch;\n  dispatch({\n    type: productTypes.CLEAR_PRODUCT\n  });\n  dispatch({\n    type: productTypes.FETCH_PRODUCT_START\n  });\n  const token = getState().userReducer.userInfo.token;\n  const query = `\n  mutation createProduct($name :String!, $description:String!,$image:String!,$category:String!, $brand:String!,$countInStock:Float!,   $price:Float!) {\n    createProduct( name :$name,  description:$description, image:$image ,category:$category,  brand:$brand, countInStock:$countInStock,    price:$price) {\n      _id\n      name\n      image\n      brand\n      price\n      rating\n      numReviews\n      category\n      description\n      countInStock\n    }\n  }\n  `;\n  Axios({\n    method: \"POST\",\n    data: {\n      query,\n      variables: {\n        name,\n        image,\n        brand,\n        price: Number(price),\n        category,\n        description,\n        countInStock: Number(countInStock)\n      }\n    },\n    url: \"/graphql\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => {\n    dispatch({\n      type: productTypes.CREATE_NEW_PRODUCT,\n      payload: res.data.data.createProduct\n    });\n  }).catch(error => {\n    console.log(error);\n    const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n    dispatch(fitchProductfail(errorMessage));\n  });\n};","map":{"version":3,"sources":["/media/bedo/E864D0B864D08B28/react&bac/mern-shop/frontend/src/redux/product/productAction.js"],"names":["Axios","productTypes","fitchProductStart","type","FETCH_PRODUCT_START","fitchProductSuccess","product","FETCH_PRODUCT_SUCCESS","payload","fitchProductfail","error","FETCH_PRODUCT_FAIL","fetchProductAscync","id","console","log","dispatch","query","method","data","variables","url","then","res","getProductById","catch","errorMessage","response","errors","message","createNewProduct","name","image","brand","price","category","description","countInStock","imageUpload","getState","CLEAR_PRODUCT","token","userReducer","userInfo","Number","headers","Authorization","CREATE_NEW_PRODUCT","createProduct"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\nimport productTypes from \"./productTypes\"\nconst fitchProductStart = () => {\n  return {\n    type: productTypes.FETCH_PRODUCT_START,\n  }\n}\nconst fitchProductSuccess = (product) => {\n  return {\n    type: productTypes.FETCH_PRODUCT_SUCCESS,\n    payload: product,\n  }\n}\nconst fitchProductfail = (error) => {\n  return {\n    type: productTypes.FETCH_PRODUCT_FAIL,\n    payload: error,\n  }\n}\n\nexport const fetchProductAscync = (id) => {\n  console.log(\"gggg\")\n  return (dispatch) => {\n    dispatch(fitchProductStart())\n    const query = `\n     query getProductById($id: String!) {\n        getProductById(id : $id) {\n         _id\n         name\n         image\n         brand\n         price\n         rating\n         numReviews\n         category\n         description\n         countInStock\n         \n         \n       }\n     }\n     `\n    Axios({\n      method: \"POST\",\n      data: {\n        query,\n        variables: { id },\n      },\n      url: \"/graphql\",\n    })\n      .then((res) => {\n        dispatch(fitchProductSuccess(res.data.data.getProductById))\n      })\n      .catch((error) => {\n        const errorMessage = error.response.data.errors\n          ? error.response.data.errors[0].message\n          : error.response.data\n\n        dispatch(fitchProductfail(errorMessage))\n      })\n  }\n}\n\nexport const createNewProduct = ({\n  name,\n  image,\n  brand,\n  price,\n  category,\n  description,\n  countInStock,\n  imageUpload\n}) => async (dispatch, getState) => {\n\n  dispatch\n  dispatch({type:productTypes.CLEAR_PRODUCT})\n\n  dispatch({type:productTypes.FETCH_PRODUCT_START})\n  const token = getState().userReducer.userInfo.token\n\n\n\n  const query = `\n  mutation createProduct($name :String!, $description:String!,$image:String!,$category:String!, $brand:String!,$countInStock:Float!,   $price:Float!) {\n    createProduct( name :$name,  description:$description, image:$image ,category:$category,  brand:$brand, countInStock:$countInStock,    price:$price) {\n      _id\n      name\n      image\n      brand\n      price\n      rating\n      numReviews\n      category\n      description\n      countInStock\n    }\n  }\n  `\n\n  Axios({\n    method: \"POST\",\n    data: {\n      query,\n      variables: {\n        name,\n        image,\n        brand,\n        price: Number(price),\n        category,\n        description,\n        countInStock: Number(countInStock),\n      },\n    },\n    url: \"/graphql\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((res) => {\n      dispatch({\n        type: productTypes.CREATE_NEW_PRODUCT,\n        payload: res.data.data.createProduct,\n      })\n    })\n    .catch((error) => {\n      console.log(error)\n      const errorMessage = error.response.data.errors\n        ? error.response.data.errors[0].message\n        : error.response.data\n\n      dispatch(fitchProductfail(errorMessage))\n    })\n}\n"]},"metadata":{},"sourceType":"module"}