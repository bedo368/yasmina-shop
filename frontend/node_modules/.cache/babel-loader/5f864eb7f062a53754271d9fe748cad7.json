{"ast":null,"code":"import Axios from \"axios\";\nimport productTypes from \"./productTypes\";\n\nconst fitchProductStart = () => {\n  return {\n    type: productTypes.FETCH_PRODUCT_START\n  };\n};\n\nconst fitchProductSuccess = product => {\n  return {\n    type: productTypes.FETCH_PRODUCT_SUCCESS,\n    payload: product\n  };\n};\n\nconst fitchProductfail = error => {\n  return {\n    type: productTypes.FETCH_PRODUCT_FAIL,\n    payload: error\n  };\n};\n\nexport const fetchProductAscync = id => {\n  console.log(\"gggg\");\n  return dispatch => {\n    dispatch(fitchProductStart());\n    const query = `\n     query getProductById($id: String!) {\n        getProductById(id : $id) {\n         _id\n         name\n         image\n         brand\n         price\n         rating\n         numReviews\n         category\n         description\n         countInStock\n         \n         \n       }\n     }\n     `;\n    Axios({\n      method: \"POST\",\n      data: {\n        query,\n        variables: {\n          id\n        }\n      },\n      url: \"/graphql\"\n    }).then(res => {\n      dispatch(fitchProductSuccess(res.data.data.getProductById));\n    }).catch(error => {\n      const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n      dispatch(fitchProductfail(errorMessage));\n    });\n  };\n};\nexport const createNewProduct = ({\n  name,\n  image,\n  brand,\n  price,\n  category,\n  description,\n  countInStock,\n  imageUpload\n}) => async (dispatch, getState) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n      Authorization: `Bearer ${token}`\n    }\n  };\n  dispatch({\n    type: productTypes.CLEAR_PRODUCT\n  });\n  dispatch({\n    type: productTypes.FETCH_PRODUCT_START\n  });\n  const token = getState().userReducer.userInfo.token;\n  const query = `\n  mutation createProduct($name :String!, $description:String!,$image:String!,$category:String!, $brand:String!,$countInStock:Float!,   $price:Float!) {\n    createProduct( name :$name,  description:$description, image:$image ,category:$category,  brand:$brand, countInStock:$countInStock,    price:$price) {\n      _id\n      name\n      image\n      brand\n      price\n      rating\n      numReviews\n      category\n      description\n      countInStock\n    }\n  }\n  `;\n  Axios.post(\"/upload\", imageUpload, config).then(data => {\n    Axios({\n      method: \"POST\",\n      data: {\n        query,\n        variables: {\n          name,\n          image: data.data,\n          brand,\n          price: Number(price),\n          category,\n          description,\n          countInStock: Number(countInStock)\n        }\n      },\n      url: \"/graphql\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      dispatch({\n        type: productTypes.CREATE_NEW_PRODUCT,\n        payload: res.data.data.createProduct\n      });\n    }).then(() => {\n      dispatch({\n        type: productTypes.CLEAR_PRODUCT\n      });\n    }).catch(error => {\n      console.log(error);\n      const errorMessage = error.response.data.errors ? error.response.data.errors[0].message : error.response.data;\n      dispatch(fitchProductfail(errorMessage));\n    });\n  });\n};","map":{"version":3,"sources":["/media/bedo/E864D0B864D08B28/react&bac/mern-shop/frontend/src/redux/product/productAction.js"],"names":["Axios","productTypes","fitchProductStart","type","FETCH_PRODUCT_START","fitchProductSuccess","product","FETCH_PRODUCT_SUCCESS","payload","fitchProductfail","error","FETCH_PRODUCT_FAIL","fetchProductAscync","id","console","log","dispatch","query","method","data","variables","url","then","res","getProductById","catch","errorMessage","response","errors","message","createNewProduct","name","image","brand","price","category","description","countInStock","imageUpload","getState","config","headers","Authorization","token","CLEAR_PRODUCT","userReducer","userInfo","post","Number","CREATE_NEW_PRODUCT","createProduct"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\nimport productTypes from \"./productTypes\"\nconst fitchProductStart = () => {\n    return {\n        type: productTypes.FETCH_PRODUCT_START,\n    }\n}\nconst fitchProductSuccess = (product) => {\n    return {\n        type: productTypes.FETCH_PRODUCT_SUCCESS,\n        payload: product,\n    }\n}\nconst fitchProductfail = (error) => {\n    return {\n        type: productTypes.FETCH_PRODUCT_FAIL,\n        payload: error,\n    }\n}\n\nexport const fetchProductAscync = (id) => {\n    console.log(\"gggg\")\n    return (dispatch) => {\n        dispatch(fitchProductStart())\n        const query = `\n     query getProductById($id: String!) {\n        getProductById(id : $id) {\n         _id\n         name\n         image\n         brand\n         price\n         rating\n         numReviews\n         category\n         description\n         countInStock\n         \n         \n       }\n     }\n     `\n        Axios({\n            method: \"POST\",\n            data: {\n                query,\n                variables: { id },\n            },\n            url: \"/graphql\",\n        })\n            .then((res) => {\n                dispatch(fitchProductSuccess(res.data.data.getProductById))\n            })\n            .catch((error) => {\n                const errorMessage = error.response.data.errors\n                    ? error.response.data.errors[0].message\n                    : error.response.data\n\n                dispatch(fitchProductfail(errorMessage))\n            })\n    }\n}\n\nexport const createNewProduct = ({\n    name,\n    image,\n    brand,\n    price,\n    category,\n    description,\n    countInStock,\n    imageUpload,\n}) => async (dispatch, getState) => {\n    const config = {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `Bearer ${token}`,\n        },\n    }\n\n    dispatch({ type: productTypes.CLEAR_PRODUCT })\n\n    dispatch({ type: productTypes.FETCH_PRODUCT_START })\n    const token = getState().userReducer.userInfo.token\n\n    const query = `\n  mutation createProduct($name :String!, $description:String!,$image:String!,$category:String!, $brand:String!,$countInStock:Float!,   $price:Float!) {\n    createProduct( name :$name,  description:$description, image:$image ,category:$category,  brand:$brand, countInStock:$countInStock,    price:$price) {\n      _id\n      name\n      image\n      brand\n      price\n      rating\n      numReviews\n      category\n      description\n      countInStock\n    }\n  }\n  `\n    Axios.post(\"/upload\", imageUpload, config).then( data => {\n        Axios({\n            method: \"POST\",\n            data: {\n                query,\n                variables: {\n                    name,\n                    image: data.data,\n                    brand,\n                    price: Number(price),\n                    category,\n                    description,\n                    countInStock: Number(countInStock),\n                },\n            },\n            url: \"/graphql\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        })\n            .then((res) => {\n                dispatch({\n                    type: productTypes.CREATE_NEW_PRODUCT,\n                    payload: res.data.data.createProduct,\n                })\n            }).then(()=>{\n              dispatch({type:productTypes.CLEAR_PRODUCT})\n            })\n            .catch((error) => {\n                console.log(error)\n                const errorMessage = error.response.data.errors\n                    ? error.response.data.errors[0].message\n                    : error.response.data\n\n                dispatch(fitchProductfail(errorMessage))\n            })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}